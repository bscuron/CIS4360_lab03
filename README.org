* Lab 03 - Hello Kubernetes Node

** Task 1. Create your Node.js application

The first thing that I did was create a JavaScript file named `server.js`. I created the file using `vim`.

[[./images/ss1.png]]

To add contents to the file, I entered insert mode by pressing `i` and pasted the JS contents into the file. I then wrote and quit by pressing `<ESC>` to enter normal mode, and `:wq` to write and quit.

[[./images/ss2.png]]

I then ran the JS file using Node.js. The command does not produce any output, but it does start a webserver on port 8080.

[[./images/ss3.png]]

I navigated to this web server using the GCP console feature: `Web preview`. From this preview, I can see the "Hello World!" message that was located in the `server.js` file.

[[./images/ss4.png]]

I then sent a SIGINT signal to the process by pressing `CTRL-c`. This interrupted the process.

** Task 2. Create a Docker container image

Next, I created a `Dockerfile` to give instructions for the image I want to build. I used `vim` to create this file. The process is the same as when creating the `server.js` file previously.

[[./images/ss5.png]]

[[./images/ss6.png]]

The `Dockerfile` that was just created will 'extend' the node image specified on the first line. Additionally, the `Dockerfile` will expose port 8080 (the same port specified in `server.js`), copy the contents of `server.js` into the image. The CMD specified in the `Dockerfile` just states that we will run the `server.js` program with Node.js.

After specifying the `Dockerfile`, I built the image using `docker build`.

[[./images/ss7.png]]

During this process, all dependencies were downloaded from the `Docker Hub`. The image was successfully built.

After building, I then ran the image using the daemon on port 8080.

[[./images/ss8.png]]

To ensure that the image was running, I used `curl` to check the output.

[[./images/ss9.png]]

As expected, the "Hello World!" message was displayed.

Next, I had to stop the running container. To do this, I first had to find out the container's ID. I used the `docker ps` command to find this information.

[[./images/ss10.png]]

As you can see, the container ID is "ea941eb3e9a6". With this information, we can now stop the running container. To do this, I used the `docker stop [container ID]` command. I also checked that this command succeeded by running `docker ps` again.

[[./images/ss11.png]]

I successfully stopped the running container.

Now that the container was working locally, I wanted to push it to the `Google Cloud Registry`. To do so, I used the `docker push` command.

*NOTE:* at this point, I realized I was using the wrong google account. So, I switched to my school account and re-did all of the previous steps. The only thing different is the <PROJECT ID>.

[[./images/ss12.png]]

[[./images/ss13.png]]

** Task 3. Create your cluster

Next step is to create my Kubernetes Engine cluster. A cluster consists of a Kubernetes master API server hosted by Google and a set of worker nodes. The worker nodes are Compute Engine virtual machines.

First, I made sure that my <PROJECT ID> was configured correctly. Which should already be OK. Just wanted to double check.

[[./images/ss14.png]]

Next, I created a cluster with two n1-standard-1 nodes. For this step, I first had to enable the Kubernetes Engine API in GCP.

[[./images/ss15.png]]

After waiting for a while, I was able to successfully create the cluster.

[[./images/ss16.png]]

** Task 4. Create your pod

Next, I created a Kubernetes pod. A Kubernetes pod is a group of containers tied together for administration and networking purposes. It can contain single or multiple containers. The container we will use is the one container built with my Node.js image stored in my private container registry. It will serve content on port 8080.

To create the pod, I used the `kubectl create` command.

[[./images/ss17.png]]

After creating the pod, I viewed both the deployment and the pod created using `kubectl get deployments` and `kubectl get pods`

[[./images/ss18.png]]

** Task 5. Allow external traffic

Currently, the pod is only accessible by its internal IP address. To make it accessible to outside users, we must expose the pod as a Kubernetes service. To do this, I used the `kubectl expose` command.

[[./images/ss19.png]]

To find the public IP address of the newly created service, we can run `kubectl get services`.

[[./images/ss20.png]]

As you can see, the external IP address (load-balancer IP) is 34.135.101.188. This means, that if we navigate to port 8080 at that address, we should see our "Hello World!" message.

[[./images/ss21.png]]

** Task 6. Scale up your service

Kubernetes has the ability to easily scale. We can set the number of replicas for our pod. This was done using the `kubectl scale` command.

[[./images/ss22.png]]

To check that this worked as intended, we can request a description of our deployment.

[[./images/ss23.png]]

Next, I listed all of the pods.

[[./images/ss24.png]]

Here is a diagram that I found useful in understanding Kubernetes clusters.

[[./images/ss25.png]]

** Task 7. Roll out an upgrade to your service

Now, we want to try to modify our application without disrupting the user experience. To do this, I first updated our `server.js` file located on the GCP console to display a new message. Here is the updated contents of the `server.js` file. My cursor is on the only line that was updated.

[[./images/ss26.png]]

Next, we must build a new image with the updated `server.js` contents and publish the newly built image. This is shown below. These two steps were very fast due to caching. Kubernetes will smoothly update your replication controller to the new version of the application.

[[./images/ss27.png]]

To change the image label for your running container, we can edit the current deployment. This is shown below. In the yaml file, we update Spec > containers > image and change the version number to v2.

[[./images/ss28.png]]

[[./images/ss29.png]]

To update the deployment with the new image the following command is ran. New pods will be created with the new image and the old pods will be deleted.

[[./images/ss30.png]]

** Task 8. Test your knowledge

Which of the following are features of the Kubernetes Engine?:
- [X] Integrated Logging and Monitoring
- [X] Stateful Application Support
- [ ] None of these
- [X] Identity and Access Management
